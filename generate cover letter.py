# the program below generate a cover letter for the job you are applying to.
# Fill up the api key, your personal info for the heading and the dic for the content.
# select the experience you want to show in the cover letter in the select, just mark the number representing the experience you want to show.
from docx import Document

from docx.shared import RGBColor
from docx.shared import Pt
import openai

try:
    api_key = "YOUR openai API KEY"
    openai.api_key = api_key
    # the prompt below generate a template for data scientist position. You can change it to other positions.
    response = openai.Completion.create(model="text-davinci-003",
                                        prompt="Write a cover letter template for data scientist position. The recipient is [Company] Recruiter and the writer is [Name]. Use [Company], [Degree], [University], [Skills], [Courses], and [Projects] to fill up the missing places.", 
                                        max_tokens = 400)
except Exception:
    print("Something went wrong with the API request.")
    print(Exception)
#                address           city     state   zip    phone number  email              leave the \n alone
personal_info = "201 Dowman Drive\nAtlanta, Georgia 30322\n123-123-1234\nYOUR_EMAIL"
dic = {
    'Name': 'YOUT NAME',
    'Company': 'AAA',
    'Degree': ['Bachelor of Science in Quantitative Sciences', 'Bachelor of Engineering in Electrical Engineering'],
    'University': ['Georgia Institute of Technology', 'Emory University'],
    'Courses': ['Data Structures and Algorithms', 'Causal Inference and Machine Learning',
                'Regression Analysis', 'Database Systems'],
    'Projects': ['do A',
                 'do B',
                 'do C'],
    #            0        1     2       3      4            5                 6            7       8
    'Skills': ['Python', 'R', 'Java', 'SQL', 'Git', 'Microsoft Office', 'Google Suite', 'Linux', 'AWS'],
}
# insert the texts in pdf
select = {
    'Degree': [0],
    'University': [1],
    'Courses': [0, 1, 2, 3],
    'Projects': [0, 1, 2],
    'Skills': [0, 1, 2, 3, 4, 5, 6, 7, 8],
}

# the paragraphs below are generated by ChatGPT
paragraphs = ["Dear [Company] Recruiter,",
              "I am writing to express my interest in the Data Science Intern position at [Company]. As a current [Degree] student at [University], I am excited to apply my skills and knowledge to real-world problems and gain hands-on experience in the field.",
              "I have a strong foundation in data analysis and machine learning, as demonstrated by my coursework in [Courses] and my experience working on [Projects]. In addition, I am highly skilled in [Skills], and I am comfortable working with large and complex datasets.",
              "I am confident that my skills and enthusiasm make me a strong fit for this internship. I am eager to contribute my skills to the team at [Company] and to learn from the talented professionals there. I believe that this internship would provide me with the opportunity to apply my knowledge and skills, while also giving me valuable experience in the industry.",
              "Thank you for considering my application. I am excited about the opportunity to join the team at [Company] and contribute to the success of the company.",
              "Sincerely,",
              "[Name]"]

template = None
try:
    template = response["choices"][0]["text"]
    template = template.split('\n\n')
    #print(template)
except Exception:
    print("Something went wrong with the API response.")
    print("Use the default template instead.")
    print(Exception)
if template is not None:
    paragraphs = template

document = Document()

style = document.styles['Normal']
font = style.font
font.name = 'Arial'
font.size = Pt(12)
document.add_paragraph(personal_info, style=style)

def make_string(d, s):
    string = d[s[0]]
    # concat with comma and space but the last one use ",and"
    for i in range(1,len(s)):
        if i == len(s) - 1:
            string += f', and {d[s[i]]}'
        else:
            string += f', {d[s[i]]}'
    return string
fill = {
    'Degree': make_string(dic['Degree'], select['Degree']),
    'University': make_string(dic['University'], select['University']),
    'Courses': make_string(dic['Courses'], select['Courses']),
    'Projects': make_string(dic['Projects'], select['Projects']),
    'Skills': make_string(dic['Skills'], select['Skills']),
    'Name': dic['Name'],
}
for p in paragraphs:
    x = p
    x = x.replace('[Company]', dic['Company'])
    x = x.replace('[Degree]', fill['Degree'])
    x = x.replace('[University]', fill['University'])
    x = x.replace('[Courses]', fill['Courses'])
    x = x.replace('[Projects]', fill['Projects'])
    x = x.replace('[Skills]', fill['Skills'])
    x = x.replace('[Name]', fill['Name'])
    document.add_paragraph(x, style=style)

name = fill['Name'].replace(' ', '_')

# save the pdf with name .pdf
import os
docx = os.path.join(os.getcwd(),f'{name}_{dic["Company"]}_cover_letter.docx')
document.save(docx)

# export to pdf
from docx2pdf import convert
convert(docx)

# delete the docx file
os.remove(docx)

import subprocess, platform
pdf = docx.replace('.docx', '.pdf')
if platform.system() == 'Darwin':       # macOS
    subprocess.call(('open', pdf))
elif platform.system() == 'Windows':    # Windows
    os.startfile(pdf)
else:                                   # linux variants
    subprocess.call(('xdg-open', pdf))